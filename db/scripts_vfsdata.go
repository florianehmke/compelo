// Code generated by vfsgen; DO NOT EDIT.

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Scripts statically implements the virtual filesystem provided to vfsgen.
var Scripts = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 9, 22, 9, 6, 41, 966756716, time.UTC),
		},
		"/schema.sql": &vfsgen۰CompressedFileInfo{
			name:             "schema.sql",
			modTime:          time.Date(2019, 9, 18, 10, 47, 1, 935449435, time.UTC),
			uncompressedSize: 2830,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\xc1\x6f\x9b\x30\x14\xc6\xef\xfc\x15\xef\x98\x48\x3b\x4d\xea\x69\x27\x87\xbc\x76\x68\xc4\x6c\xae\x33\xad\x27\x64\x81\xd5\x30\x35\x04\x19\xa6\x6e\xff\xfd\x84\x6d\x08\xae\x1e\x25\x9d\xa6\xaa\x93\xd6\x5b\xf9\x9e\x9f\x3f\xff\xbe\xe7\x38\x16\xc8\x24\x82\x64\x9b\x14\xa1\x31\xa7\xef\xba\xe8\xda\x68\x15\x01\x00\x54\x25\x4c\xfe\x12\x2e\xf1\x06\x05\x7c\x16\xc9\x8e\x89\x3b\xf8\x84\x77\xc0\xf6\x32\x4b\x78\x2c\x70\x87\x5c\xbe\xb3\x8b\x0a\xa3\x55\xa7\xcb\x5c\x75\xfd\x7f\x5b\x26\x51\x26\x3b\x74\xda\x8f\xa6\x9c\xd5\x4a\xfd\xa0\xe7\xb4\x5a\x1d\xf5\xd9\xc8\x57\x26\xe2\x8f\x4c\xac\xde\x5f\x5d\xad\x81\x67\x12\xf8\x3e\x4d\x61\xcf\x93\x2f\x7b\x5f\xdf\xa8\xb6\x7d\x3c\x99\x32\x3f\xa8\xf6\x00\x9b\x34\xdb\x8c\x8b\x87\xfa\x68\xfd\x21\x8a\xfc\xe1\x13\xbe\xc5\x6f\x50\x95\x3f\xf3\x01\x40\x7e\x76\x63\x1b\x66\x7c\x64\x03\xab\xb3\xd6\xf7\x18\xbb\x38\x84\xf7\xea\xa8\x09\x7e\x2f\x87\x37\x4b\x6e\x16\xdb\x2c\xb3\x0b\x80\xb9\xc3\xe5\x55\x39\x3a\x0d\x68\xb9\xaa\xeb\x4c\x60\x72\xc3\xad\xf9\xd5\x79\xc9\x1a\x04\x5e\xa3\x40\x1e\xe3\xed\x04\x53\x2f\x64\x1c\xb6\x98\xa2\x44\x88\xd9\x6d\xcc\xb6\x48\x63\xb7\xd0\x08\xe6\xf6\xfb\x02\xf0\xe6\x41\xfd\xd2\xe6\x3f\xf2\x17\x22\xf7\xd8\xa8\x41\x77\xca\x02\x76\xa3\xba\xaa\xbe\x7f\x13\xd8\x9d\x95\x60\xf3\x10\x62\x3f\x46\xb9\xb3\x48\x17\xb8\x23\xdb\x12\xba\x20\x88\xc1\xb7\x0b\x32\xf0\x93\x4a\x06\x40\x25\x39\x6c\x18\x06\x39\x90\xaf\xca\x35\x9d\x9a\xa7\x4e\xa4\xe6\x95\x85\xd4\x8e\xaa\x2b\x0e\x6f\xe3\xf7\xa9\xaf\xf7\x9b\x0f\xc2\x62\x6c\x7f\x21\x0c\x9a\xab\xe7\x42\x70\xf5\xca\x02\x57\xd5\x34\x5a\x19\x55\x17\x14\xdb\x3f\x7b\x3a\x9f\x79\x39\x9f\x79\x38\x43\xc9\x9a\xf7\x08\x67\x26\xbb\xd3\xea\x38\x54\x2c\xdf\x8e\xb9\x12\x37\x7d\x3d\xbe\x4e\x5d\x72\x85\x06\x63\x41\x6c\x23\xea\x4b\x6f\x91\xf7\x1e\x34\xe9\xbf\xbd\xc2\x45\x9c\x04\x4e\x0c\xcd\x44\x5d\x18\x1c\x6b\xf7\x1f\x1b\x99\xb6\x38\x19\xfd\xc4\xa7\x53\x1e\xab\xba\xd6\x86\x52\x5e\x61\x40\xe8\xa0\x2c\x60\x22\x22\x3f\x27\x4f\xc2\xf9\x1d\x00\x00\xff\xff\x76\xc2\xbe\x74\x0e\x0b\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schema.sql"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
